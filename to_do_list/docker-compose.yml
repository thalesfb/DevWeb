services:
  app1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app1
    environment:
      - PORT=5000
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/todolist
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data:/app/data
    depends_on:
      cert-generator:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/oi"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  app2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app2
    environment:
      - PORT=5001
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/todolist
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data:/app/data
    depends_on:
      cert-generator:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/oi"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  app3:
    image: busybox:latest
    container_name: app3
    volumes:
      - ./backup:/var/www
    command: ["httpd", "-f", "-p", "3000", "-h", "/var/www"]
    depends_on:
      cert-generator:
        condition: service_healthy

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/letsencrypt
    ports:
      - "80:80"   # Mapeia para 80 no host
      - "443:443"  # Mapeia para 443 no host
    depends_on:
      app1:
        condition: service_healthy
      app2:
        condition: service_healthy
      app3:
        condition: service_started
      cert-generator:
        condition: service_healthy
    restart: always

  db:
    image: postgres:14-alpine
    container_name: db
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=todolist
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/init_postgres.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  cert-generator:
    image: alpine:latest
    container_name: cert-generator
    volumes:
      - ./certs:/etc/letsencrypt
    command: >
      /bin/sh -c "
        apk add openssl &&
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/letsencrypt/privkey.pem -out /etc/letsencrypt/fullchain.pem -subj '/CN=localhost' &&
        chown -R 101:101 /etc/letsencrypt &&
        tail -f /dev/null  # Mantém o container ativo após gerar os certificados
      "
    healthcheck:
      test: ["CMD", "test", "-f", "/etc/letsencrypt/fullchain.pem"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local 